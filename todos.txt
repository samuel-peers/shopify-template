- [x] copy index.html into dist
- [x] global eslint config file
- [x] global dist folder?
- [x] bundle server code and node modules
- [x] fudge the yarn stuff (delete the yarn lock)
- [x] favicon not showing
- [x] logo not showing
- [x] shopify auth
- [x] fucking eslint no vars, " versus ', object shorthand
- [x] tmux script
- [x] run source zipper.sh in npm build
- [x] add shopify keys to lambda env variables
- [x] server verification (look up on shopify tutorial)
- [] lambda auto deploy on commit
- [x] on authenticated install, redirect
- [x] replace stupid require statements
- [x] server hotloading
- [] HARD CODED SERVER URL
- [x] index page security
- [] solid fucking logging
- [x] static security
- [x] redis session
- [x] redis security group
- [] actual session security
- [] better session secret key
- [] node debugging
- [x] return 404s on rejection
- [x] just res.sendstatus instead of redirect
- [x] will my redis sessions be destroyed on exit or something? nope
- [] delete old sessions?
- [x] is babel config needed?
- [] does everything still work when updating lambda?
- [] a name
- [] somehow unify lambda .env and local .env
- [] redirect to shopify admin or promo site on unauthed path
- [x] run .env in npm run backend-server
- [x] redis ami
- [] lambda cold start. https://medium.freecodecamp.org/lambda-vpc-cold-starts-a-latency-killer-5408323278dd
use roles instead somehow?
https://medium.com/@lakshmanLD/resolving-cold-start%EF%B8%8F-in-aws-lambda-804512ca9b61
MODIFY SECURITY GROUP TO ALLOW ALL TRAFFIC FROM VPC https://stackoverflow.com/questions/40774585/aws-lambda-access-to-rds-outside-vpc
never mind goddammit just try dynamo instead
- [] hotloader writing a million update.js files https://github.com/gaearon/react-hot-loader/issues/456
consider alternatives https://webpack.js.org/configuration/watch/#watchoptions-poll + nodemon
- [] cookie: {httpOnly: true} makes sessions unaccessible in apigateway/lambda